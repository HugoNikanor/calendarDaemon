

     +———————————————————+
     |                   |
     |  Google Calendar  |
     |                   |
     +———————————————————+
          ^    |
          |    | A
          |    v
     +—————————————+   B   +———————————————+
     |             |<——————|               |
     | Java Daemon |       |  File System  |
     |             |——————>|               |
     +—————————————+       +———————————————+
          ^    |            ^  |       ^  |
          |    | C          |  | D     |  |
          |    v            |  v       |  |
     +—————————————————————————+       |  |
     |                         |       |  |
     |     Bash Interface      |       |  | E
     |                         |       |  |
     +—————————————————————————+       |  |
                   ^  |                |  |
                   |  | F              |  |
                   |  v                |  v
     +—————————————————————————————————————+
     |                                     |
     |           User / Terminal           |
     |                                     |
     +—————————————————————————————————————+


while daemon is active, send all file events to the server
directory changes should not be sent,
	this allows for easy toggling of which days to send and which not to send


about once an hour or once a day the system should take a snapshot of the file
system, it should then compare it to the last snapshot. Any changes in file
should be sent to the server. (This is if the daemon missed some changes, either
due to an error, or due to the daemon being temporarly murdered)
	simmalar to this (written in bash)
		ls -Rl ~/calendar > newSnapshot
		diff oldSnapshot newSnapshot
		sendEventsToServer
		mv newSnapshot oldSnapshot


About once an hour, or when the user requests it, the daemon should pull data
from the server and write it to the filetsystem


Creating events localy should be done by just creating a file in the correct
place in the filesystem.


the bash interface should allow for simple command giving information about
parts of the filesystem. for example ``calendar today`` would return a list
of calendar events for the current day.

——————————————————————————————————————————————————

main creates a live directoryWatcher and a semi-passive directory logger
When either of them detect an event, they add the event to the event que
(the event que makes sure that the same event isn't submitted more than once, 
this may be a concern if both the live and passive directory wather detect the 
change (which they are suposed to do))

The eventQue will call the API and upload the events when its convinient to do
so. (ASAP, but user may be offline, or creating very many objects at once,
which might recuire some throttling)


A semi-sepparate part of the program will periodicly check the API for updates
to the server. This should also connect to the part of the program logging
events uploaded, to prevent a download and upload loop.


the downloader sholud only download to dates "existing", meaning that their
directories exist.
Only dates deamed relevant by the program will get auto downloaded and checked
on the update cycle. ( I might change my idea here if the API get calls are much
cheaper than expected )

THE SERVER CONNECTION PACKET
APIConnection — Singleton for authentication code
# these two should be interfacable by the interface
EventFetcher — Download events from server
EventQue — Handle uploading of event to server

Those two should maybe be wrapped in an eventHandler class,
then filtering the events when the time has come


The (bash) interface should be able to:
* get latest update time
* get status of event que
* Force an upload scan
* force a download from the server
* querry an download for odd dates 
The bash part should also be able to do some other things, not tied to the
server:
* get list of todays event
* get list of events in time interval
